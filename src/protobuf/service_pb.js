/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.payslips.GetPaySlipsRequest', null, global);
goog.exportSymbol('proto.payslips.PaySlip', null, global);
goog.exportSymbol('proto.payslips.PaySlipCollection', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payslips.PaySlip = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payslips.PaySlip, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payslips.PaySlip.displayName = 'proto.payslips.PaySlip';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payslips.PaySlip.prototype.toObject = function(opt_includeInstance) {
  return proto.payslips.PaySlip.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payslips.PaySlip} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payslips.PaySlip.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nationalinsurancenumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    taxcode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paidby: jspb.Message.getFieldWithDefault(msg, 4, ""),
    paydate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    payperiod: jspb.Message.getFieldWithDefault(msg, 6, 0),
    employersnicontributions: jspb.Message.getFieldWithDefault(msg, 7, 0),
    employerspensioncontributionsthisperiod: jspb.Message.getFieldWithDefault(msg, 8, 0),
    taxreference: jspb.Message.getFieldWithDefault(msg, 9, ""),
    taxdistrict: jspb.Message.getFieldWithDefault(msg, 10, ""),
    salary: jspb.Message.getFieldWithDefault(msg, 11, 0),
    net: jspb.Message.getFieldWithDefault(msg, 12, 0),
    user: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payslips.PaySlip}
 */
proto.payslips.PaySlip.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payslips.PaySlip;
  return proto.payslips.PaySlip.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payslips.PaySlip} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payslips.PaySlip}
 */
proto.payslips.PaySlip.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNationalinsurancenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxcode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaidby(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaydate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayperiod(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEmployersnicontributions(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEmployerspensioncontributionsthisperiod(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxreference(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaxdistrict(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSalary(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNet(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payslips.PaySlip.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payslips.PaySlip.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payslips.PaySlip} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payslips.PaySlip.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNationalinsurancenumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTaxcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPaidby();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPaydate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPayperiod();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getEmployersnicontributions();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getEmployerspensioncontributionsthisperiod();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTaxreference();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTaxdistrict();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSalary();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getNet();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nationalInsuranceNumber = 2;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getNationalinsurancenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setNationalinsurancenumber = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string taxCode = 3;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getTaxcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setTaxcode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string paidBy = 4;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getPaidby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setPaidby = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string payDate = 5;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getPaydate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setPaydate = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 payPeriod = 6;
 * @return {number}
 */
proto.payslips.PaySlip.prototype.getPayperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.payslips.PaySlip.prototype.setPayperiod = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 employersNIContributions = 7;
 * @return {number}
 */
proto.payslips.PaySlip.prototype.getEmployersnicontributions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.payslips.PaySlip.prototype.setEmployersnicontributions = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 employersPensionContributionsThisPeriod = 8;
 * @return {number}
 */
proto.payslips.PaySlip.prototype.getEmployerspensioncontributionsthisperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.payslips.PaySlip.prototype.setEmployerspensioncontributionsthisperiod = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string taxReference = 9;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getTaxreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setTaxreference = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string taxDistrict = 10;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getTaxdistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setTaxdistrict = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 salary = 11;
 * @return {number}
 */
proto.payslips.PaySlip.prototype.getSalary = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.payslips.PaySlip.prototype.setSalary = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 net = 12;
 * @return {number}
 */
proto.payslips.PaySlip.prototype.getNet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.payslips.PaySlip.prototype.setNet = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string user = 13;
 * @return {string}
 */
proto.payslips.PaySlip.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.payslips.PaySlip.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payslips.PaySlipCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payslips.PaySlipCollection.repeatedFields_, null);
};
goog.inherits(proto.payslips.PaySlipCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payslips.PaySlipCollection.displayName = 'proto.payslips.PaySlipCollection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payslips.PaySlipCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payslips.PaySlipCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.payslips.PaySlipCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payslips.PaySlipCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payslips.PaySlipCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    slipsList: jspb.Message.toObjectList(msg.getSlipsList(),
    proto.payslips.PaySlip.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payslips.PaySlipCollection}
 */
proto.payslips.PaySlipCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payslips.PaySlipCollection;
  return proto.payslips.PaySlipCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payslips.PaySlipCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payslips.PaySlipCollection}
 */
proto.payslips.PaySlipCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payslips.PaySlip;
      reader.readMessage(value,proto.payslips.PaySlip.deserializeBinaryFromReader);
      msg.addSlips(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payslips.PaySlipCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payslips.PaySlipCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payslips.PaySlipCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payslips.PaySlipCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlipsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.payslips.PaySlip.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PaySlip slips = 1;
 * @return {!Array<!proto.payslips.PaySlip>}
 */
proto.payslips.PaySlipCollection.prototype.getSlipsList = function() {
  return /** @type{!Array<!proto.payslips.PaySlip>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payslips.PaySlip, 1));
};


/** @param {!Array<!proto.payslips.PaySlip>} value */
proto.payslips.PaySlipCollection.prototype.setSlipsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.payslips.PaySlip=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payslips.PaySlip}
 */
proto.payslips.PaySlipCollection.prototype.addSlips = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.payslips.PaySlip, opt_index);
};


proto.payslips.PaySlipCollection.prototype.clearSlipsList = function() {
  this.setSlipsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payslips.GetPaySlipsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payslips.GetPaySlipsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.payslips.GetPaySlipsRequest.displayName = 'proto.payslips.GetPaySlipsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payslips.GetPaySlipsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.payslips.GetPaySlipsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payslips.GetPaySlipsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payslips.GetPaySlipsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payslips.GetPaySlipsRequest}
 */
proto.payslips.GetPaySlipsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payslips.GetPaySlipsRequest;
  return proto.payslips.GetPaySlipsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payslips.GetPaySlipsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payslips.GetPaySlipsRequest}
 */
proto.payslips.GetPaySlipsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payslips.GetPaySlipsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payslips.GetPaySlipsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payslips.GetPaySlipsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payslips.GetPaySlipsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.payslips);
